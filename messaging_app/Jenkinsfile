pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main',
                     credentialsId: 'github-creds-id',
                     url: 'https://github.com/TheKingsident/alx-backend-python.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    cd messaging_app
                    /opt/jenkins-venv/bin/pip install -r requirements.txt
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                    cd messaging_app
                    export DJANGO_SETTINGS_MODULE=messaging_app.settings
                    /opt/jenkins-venv/bin/pytest --junitxml=report.xml --verbose
                '''
            }
        }

        stage('Publish Report') {
            steps {
                echo 'Test execution completed'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-creds-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            cd messaging_app
                            docker build -t $DOCKER_USERNAME/messaging-app:${BUILD_NUMBER} .
                            docker tag $DOCKER_USERNAME/messaging-app:${BUILD_NUMBER} $DOCKER_USERNAME/messaging-app:latest
                            
                            echo "Docker image built successfully:"
                            echo "- $DOCKER_USERNAME/messaging-app:${BUILD_NUMBER}"
                            echo "- $DOCKER_USERNAME/messaging-app:latest"
                        '''
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-creds-id', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            # Login to Docker Hub
                            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                            
                            # Push images to Docker Hub
                            docker push $DOCKER_USERNAME/messaging-app:${BUILD_NUMBER}
                            docker push $DOCKER_USERNAME/messaging-app:latest
                            
                            echo "Docker images pushed successfully:"
                            echo "- $DOCKER_USERNAME/messaging-app:${BUILD_NUMBER}"
                            echo "- $DOCKER_USERNAME/messaging-app:latest"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}
