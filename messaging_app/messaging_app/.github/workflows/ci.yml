name: Django CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_messaging_app
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config default-libmysqlclient-dev build-essential

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd messaging_app
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
          sleep 1
        done

    - name: Set up environment variables
      run: |
        echo "DJANGO_SETTINGS_MODULE=messaging_app.settings" >> $GITHUB_ENV
        echo "DB_NAME=test_messaging_app" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_PORT=3306" >> $GITHUB_ENV

    - name: Check migrations
      run: |
        cd messaging_app
        python manage.py showmigrations --settings=messaging_app.test_settings
        
    - name: Run migrations
      run: |
        cd messaging_app
        python manage.py migrate --settings=messaging_app.test_settings --run-syncdb

    - name: Verify database setup
      run: |
        cd messaging_app
        python manage.py shell --settings=messaging_app.test_settings -c "
        from django.db import connection
        cursor = connection.cursor()
        cursor.execute('SHOW TABLES')
        tables = cursor.fetchall()
        print('Available tables:', [table[0] for table in tables])
        
        # Check if django_content_type table exists
        table_names = [table[0] for table in tables]
        if 'django_content_type' in table_names:
            print('✓ django_content_type table exists')
        else:
            print('✗ django_content_type table missing')
            exit(1)
        "

    - name: Run tests
      run: |
        cd messaging_app
        python -m pytest --junitxml=test-results.xml --cov=. --cov-report=xml --verbose

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: messaging_app/test-results.xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
